max_depth = paradox::p_int(lower = 3, upper = 5),
# Learning rate - "shrinkage" - prevents over-fitting
eta = paradox::p_dbl(lower = .1, upper = .4),
#regularizes by limiting the depth of trees, which helps prevent over-fitting
min_child_weight = paradox::p_dbl(lower = 1, upper =10),
colsample_bytree = paradox::p_dbl(lower = 0.5, upper =1),
subsample = paradox::p_dbl(lower = 0.5, upper =1),
#L2 regularization term on weights
lambda = paradox::p_dbl(lower = -1, upper = 0, trafo = function(x) 10^x))
#Tuner for re-sampling only
at_resample <- mlr3tuning::AutoTuner$new(
learner = learner,
resampling = tune.level,
measure = mlr3::msr("classif.auc"),
search_space = search_space,
terminator = evals,
tuner = tuner
)
tic()
resampled = mlr3::resample(task = task,
learner = at_resample,
# outer resampling (performance level)
resampling = perf.level,
store_models = F,
encapsulate = "evaluate")
toc()
setwd("E:/01_NSW phase 2/statelevelanalysis")
setwd("E:/01_NSW phase 2/statelevelanalysis")
#Load required libraries
required.packages <- c("sf","terra","data.table","tidyverse",
"mlr3","mlr3learners","mlr3spatiotempcv",
"mlr3viz","mlr3tuning","iml","future","furrr",
"purrr","xgboost","lattice","tictoc","scico","ggtext")
purrr::walk(required.packages,library, character.only = T)
#####User modified parameters
region <- c("state","Central West","Tablelands","Coastal","Western")
agent <- c("agri","fores","infra","combined")
nfolds <- 5 #CV folds
nreps <- 2 #Number of times to repeat CV
nmod <- 20 #Hyper parameter search limit
proportion_sample <- 0.2
#Specify the data path based on the system
data.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ "./data/",
Sys.info()["sysname"] == "Darwin" ~ "/Users/ascelin/tmp/NSW_cfac/data/",
Sys.info()["sysname"] == "Linux" ~ "/home/ubuntu/data/"
)
#Warning message if it can't find the directory
if (dir.exists(data.path)){
print("Directory exists - process will run")
} else {
string.to.print <- paste("ERROR: can't find the directory: check data path", data.path)
stop(string.to.print)
}
nsw <- st_read(str_c(data.path,"studyarea/state/NSW_STATE_POLYGON_shp_ex_islands_proj.shp"))
combined_bio <- st_read(str_c(data.path,"studyarea/Cfact_analysis_regions/Cfact_analysis_regions_prj.shp"))
bioregion <- st_read(str_c(data.path,"studyarea/ibra/IBRA_NSW_clipped.shp"))
studyarea <- rbind(nsw %>% transmute(name = "state"),
combined_bio %>% transmute(name = combined_bio$Cfact_Regi),
bioregion %>% transmute(name = bioregion$REG_NAME_7))
agent <- c("agri","fores","infra","combinedaf","combinedafi")
agent <- c("agri","fores","infra","af","afi")
# #Test
region <- "Central West"
agent <- "af"
results.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ str_c("./results/",region,"/"),
Sys.info()["sysname"] == "Darwin" ~ str_c("/Users/ascelin/tmp/NSW_cfac/results/",region,"/"),
Sys.info()["sysname"] == "Linux" ~ str_c("/home/ubuntu/results/",region,"/")
)
if (!dir.exists(results.path)){dir.create(results.path)}
print(str_c("Preparing data to run ", agent, " in ", region, " bioregion"))
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = "majorityrule")
cov.path <- dir(str_c(data.path, "covariates", sep=""), full.names = T, pattern = ".tif$")
#Remove minimum lot size from the state level as there is no data in western states
cov.path <- str_subset(cov.path, pattern = "minimumlotsize", negate = T)
#Load BCT and WOODY DATA
bct <- st_read(dir(str_c(data.path,"/bct/"), full.names = T, pattern = "*.shp$"))
woody.private.land <- rast(dir(str_c(data.path, "woodyonprivateland", sep=""), full.names = T, pattern = ".tif$"))
#Create a function to run analysis across the parameters
roi <- studyarea %>% filter(name == region)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~  str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~  c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~  c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = "majorityrule")
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri")
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"))
#Load required libraries
required.packages <- c("sf","terra","data.table","tidyverse",
"mlr3","mlr3learners","mlr3spatiotempcv",
"mlr3viz","mlr3tuning","iml","future","furrr",
"purrr","xgboost","lattice","tictoc","scico","ggtext")
purrr::walk(required.packages,library, character.only = T)
#Load required libraries
required.packages <- c("sf","terra","data.table","tidyverse",
"mlr3","mlr3learners","mlr3spatiotempcv",
"mlr3viz","mlr3tuning","iml","future","furrr",
"purrr","xgboost","lattice","tictoc","scico","ggtext")
purrr::walk(required.packages,library, character.only = T)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
agent <- "combined"
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "combined" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
loss.path
str_subset(loss.path,"agri")
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "combined" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
str_subset(loss.path,"agri")
str_subset(loss.path,"fores")
str_subset(loss.path,"agri")
str_subset(loss.path,"fores")
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "combined" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
str_subset(loss.path,"fores")
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = "majorityrule.tif$")
loss.path
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "combined" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
str_subset(loss.path,"agri")
str_subset(loss.path,"fores"))
str_subset(loss.path,"fores")
c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
agent <- "af"
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")))
loss.file
loss.raster <- rast(loss.file)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path, "infra")))
c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra")))
c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
rm(loss.file)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra")))
a <- c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
a
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra")))
rlang::last_error()
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra")))
loss.file <- case_when (
agent == "afi" ~ a
)
a <- c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
loss.file <- case_when (
agent == "afi" ~ a
)
a
loss.file <- case_when (
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
agent = "afi"
loss.file <- case_when (
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~  str_subset(loss.path,"agri"),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~  c(str_subset(loss.path,"agri"),
str_subset(loss.path, "fores")),
agent == "afi" ~ c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))
)
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~  c(str_subset(loss.path,"agri"),
str_subset(loss.path, "fores")))
loss.file
agent = "af"
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores"),
agent == "infra" ~ str_subset(loss.path,"infra"),
agent == "af" ~  c(str_subset(loss.path,"agri"),
str_subset(loss.path, "fores")))
loss.file
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores")
)
agent = "agri"
loss.file <- case_when (
agent == "agri" ~ str_subset(loss.path,"agri"),
agent == "fores" ~ str_subset(loss.path, "fores")
)
loss.file
loss.file <- case_when (
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores"))
)
loss.file <- unlist(loss.file)
loss.file
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.file <- unique(loss.file) #Remove duplicate filenames
agent <- "afi"
agent
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.file
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.file
loss.file <- unlist(loss.file)
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.file
loss.raster <- rast(loss.file)
#Crop to the ROI only if it is not a state model
ifelse(
region == "state",
loss.raster,
loss.raster <- loss.raster %>% crop(roi) %>% mask(vect(roi))
)
region <- "state"
agent <- "afi"
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
loss.file <- unlist(loss.file)
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.raster <- rast(loss.file)
plot(loss.raster)
plot(loss.raster)
loss.raster <- merge(loss.raster)
loss.raster <- loss.raster %>% map(merge)
loss.raster <- loss.raster %>%
as.list () %>% map(merge)
loss.raster <- loss.raster %>%
as.list ()
View(loss.raster)
loss.raster <- loss.raster %>%
as.list () %>% map(., merge)
loss.raster <- loss.raster %>%
as.list () %>% map(., terra::merge)
loss.raster <- loss.raster %>%
as.list () %>%
map(plot)
loss.raster <- rast(loss.file)
loss.raster <- mosaic(loss.raster)
loss.raster <- sprc(rast(loss.file))
loss.raster <- merge(loss.raster)
plot(loss.raster)
loss.raster <- mosaic(loss.raster)
loss.raster <- sprc(rast(loss.file))
loss.raster <- mosaic(loss.raster)
plot(loss.raster)
loss.raster <- sprc(rast(loss.file))
View(loss.raster)
loss.raster <- rast(loss.file)
loss.raster <- rast(loss.file)
loss.raster <- mosaic(loss.raster)
loss.raster <- do.call(loss.raster, merge)
loss.raster <- rast(loss.file) %>% list()
loss.file <- unlist(loss.file)
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.raster <- rast(loss.file) %>% list()
loss.raster <- rast(loss.file) %>% as.list()
loss.raster <- do.call(loss.raster, merge)
View(loss.raster)
do.call
?do.call
loss.raster <- do.call(merge, loss.raster)
plot(loss.raster)
loss.raster <- rast(loss.file) %>% as.list()
loss.raster %>% map(plot)
plot(loss.raster)
loss.raster <- rast(loss.file) %>% as.list()
loss.raster %>% map(plot)
View(loss.raster)
plot(loss.raster[[1]])
plot(loss.raster[[2]])
plot(loss.raster[[3]])
loss.file
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.file
loss.raster <- map(loss.file, rast)
plot(loss.raster[[1]])
plot(loss.raster[[2]])
plot(loss.raster[[3]])
loss.raster <- do.call(merge, loss.raster)
plot(loss.raster)
?if_else
#Crop to the ROI only if it is not a state model
if_else(
region == "state",
loss.raster,
loss.raster <- loss.raster %>% crop(roi) %>% mask(vect(roi))
)
#Crop to the ROI only if it is not a state model
ifelse(
region == "state",
loss.raster,
loss.raster <- loss.raster %>% crop(roi) %>% mask(vect(roi))
)
#Clip Loss Raster
all.losses <- rast(str_c(data.path,"loss/", "nsw_state_allagents_resampled100m_majorityrule.tif"))
?ifelse
ifelse(
region == "state",
all.losses,
all.losses <- all.losses %>% crop(roi) %>% mask(vect(roi))
)
woodyonprivate <- rast(str_c(data.path, "woodyonprivateland/","woodyonprivate.tif"))
ifelse(
region == "state",
woodyonprivate,
woodyonprivate <- woodyonprivate %>% crop(roi) %>% mask(vect(roi))
)
loss.pts <- as.points(loss.raster) %>%
geom() %>%
as.data.frame() %>%
transmute(x,y)
#set to use 4 CPUs
set_threads(learner, n = availableCores()-5)
?ggsave
