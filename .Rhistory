labs(x = "Distribution of the cost of randomly selected parcels",
title = "Distribution of cost, the vertical dashed red line represents
the cost of the solution using prioritizr")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
histcost
grid_random <- plot_grid(
title2, dist, histcost, nrow = 3, rel_heights = c(0.1,1,0.7)
)
ggsave(str_c("./results/","random",N,"_species.png"),
grid_random,
units="in",
width = 15, height = 20,
dpi = 300,
bg="white")
dist <- df %>%
ggplot()+
geom_point(aes(randomid,relative_held,col = factor(randomid)),size=4)+
geom_hline(yintercept = 0.20, col="black",size=1)+
labs(x = "100 random combination of parcel selection",
y = "Relative proportion of features held",
title = "Each x-axis has 6 features 5 SDMs and 1 risk")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
dist
#Cost of the solution
histcost <- df %>%
ggplot()+
geom_histogram(aes(solution_cost), col = "white")+
geom_vline(xintercept = min(results$solution_cost),
linetype = "dashed",
size = 2,
col = "red")+
labs(x = "Distribution of the cost of randomly selected parcels",
title = "Distribution of cost, the vertical dashed red line represents
the cost of the solution using prioritizr")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
histcost
grid_random <- plot_grid(
title2, dist, histcost, nrow = 3, rel_heights = c(0.1,1,0.7)
)
ggsave(str_c("./results/","random",N,"_species.png"),
grid_random,
units="in",
width = 15, height = 20,
dpi = 300,
bg="white")
dist <- df %>%
ggplot()+
geom_point(aes(randomid,relative_held,col = factor(randomid)),size=4)+
geom_hline(yintercept = 0.20, col="black",size=1)+
labs(x = "100 random combination of parcel selection",
y = "Relative proportion of features held",
title = "Each x-axis has 6 features 5 SDMs and 1 risk\n
represented vertically with same color")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
dist
#Cost of the solution
histcost <- df %>%
ggplot()+
geom_histogram(aes(solution_cost), col = "white")+
geom_vline(xintercept = min(results$solution_cost),
linetype = "dashed",
size = 2,
col = "red")+
labs(x = "Distribution of the cost of randomly selected parcels",
title = "Distribution of cost, the vertical dashed red line represents
the cost of the solution using prioritizr")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
histcost
grid_random <- plot_grid(
title2, dist, histcost, nrow = 3, rel_heights = c(0.1,1,0.7)
)
ggsave(str_c("./results/","random",N,"_species.png"),
grid_random,
units="in",
width = 15, height = 20,
dpi = 300,
bg="white")
# create raster
r <- raster(ncol=100, nrow=100, xmn=0, xmx=10, ymn=0, ymx=10)
values(r) <- 1
c <- raster(ncol=10, nrow=10, xmn=0, xmx=10, ymn=0, ymx=10)
values(c) <- 1
# Note this requires the Random Fields package to be installed)
#Cost
set.seed(2022)
cost <- simulate_cost(c)
cost <- round(cost)
names(cost) <- "cost"
plot(cost)
#Use the costs as the base data
set.seed(2023)
parcels <- rasterToPolygons(cost) %>%
st_as_sf() %>%
mutate(nocost = 1) %>%
mutate(pa = sample(c(FALSE,TRUE),100,replace = TRUE, prob=c(.7, .03)))
pa <- parcels[parcels$pa==TRUE,]
plot(parcels)
#sdm
set.seed(2022)
sdm <- simulate_species(r, n = 10, model = RandomFields::RMexp())
sdm <- as.list(sdm) %>%
set_names(str_c("sps",1:10))
sdm <- stack(sdm)
plot(sdm)
#Random veg class values #Create 5 vegetation classes
veg_values <- seq(1,5,1)
veg_values <- sample(veg_values, size = ncell(r), replace = T)
vegetation <- setValues(r,veg_values)
names(vegetation) <- "veg"
plot(vegetation)
#Create a raster-stack of vegetation types
vect <- 1:5
classify <- function(x) {
img <- vegetation
img <- clamp(img, lower=x, upper=x, useValues = F)
}
vegstack <- vect %>%
map(classify) %>%
set_names(str_c("veg",vect)) %>%
stack()
plot(vegstack)
#Create a woody vegetation data
woody <- r
woody <- sampleRandom(woody, ncell(r)*.9, asRaster=TRUE)
names(woody) <- "woody"
plot(woody)
##RISK DATA##
set.seed(2030)
risk <- simulate_species(woody, n = 1, model = RandomFields::RMexp())
risk <- mask(risk,pa, inverse=T)
names(risk) <- "risk"
plot(risk)
plot_rast <- function(r){
df <- as.data.frame(r, xy=T)
fill <- colnames(df)[3]
p <- df %>%
purrr::set_names(c("x","y",fill)) %>%
ggplot()+
geom_raster(aes_string(x= "x", y= "y", fill = fill))+
scale_fill_scico(palette = "roma",na.value="black", direction=1)+
labs(x="",y="",title="")+
theme_minimal()+
theme(legend.position="bottom")
p
}
plot_cost <- plot_rast(cost)+scale_fill_scico(palette = "roma", direction=-1)
plot_risk <- plot_rast(risk)
plot_veg <- plot_rast(vegetation)
##polygons
pu <-  ggplot()+
geom_sf(data = parcels, fill = "white", size = 1)+
geom_sf(data = pa, fill = "forestgreen", size = 1.2)+
coord_sf(datum = NA)+
theme_void()+
ggtitle(expression(atop(bold("Planning units"))))
##Plotting for solutions
plot_solution <- function(solution){
ggplot()+
geom_sf(data = solution, aes(fill = as.factor(solution_1)))+
scale_fill_manual(values = c("white", "red"),
name = "",
labels = c("Parcels","Solution"))+
new_scale_fill()+
geom_sf(data = pa, fill=NA, aes(col = as.factor(pa)), size = 1.5)+
scale_color_manual(values = c("forestgreen"),
name = "",
labels = c("Existing PAs"))+
theme_minimal()+
coord_sf(datum = NA)+
theme(legend.position = "bottom")
}
#Function to add solution to raster plots
add_solution_plot <- function(raster_ggplot, solution){
raster_ggplot +
geom_sf(data = solution, fill=NA, aes(col = as.factor(solution_1),
size = as.factor(solution_1)))+
scale_color_manual(values = c("black","red"),
name = "",
labels = c("Parcels","Solution"),
guide = "none")+
scale_size_manual(values = c(1,1.5), guide = "none")+
new_scale_color()+
geom_sf(data = pa, fill=NA, aes(col = as.factor(pa)), size = 1.5)+
scale_color_manual(values = "forestgreen",
name = "",
labels = "Existing PAs",
guide = "none")+
theme_minimal()+
coord_sf(datum = NA)+
theme(legend.position = "bottom")+
theme(plot.margin = unit(c(-1, 0, 0, -1), "cm"))
}
N <- 1
sdmN <- sdm[[1:N]]
t <- data.frame(
feature = c(names(risk),names(sdmN)),
type = c("relative", rep("relative",nlayers(sdmN))),
sense = c(">=", rep(">=",nlayers(sdmN))),
target = c(0.2, rep(0.2,nlayers(sdmN)))
)
p <-
problem(parcels, features = stack(risk,sdmN), cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t)
s <- solve(p)
nparcels <- nrow(s %>% filter(pa ==FALSE, solution_1==1))
results <- eval_target_coverage_summary(p,s["solution_1"]) %>%
mutate(
total_cost = sum(getValues(cost)),
solution_cost = eval_cost_summary(p,s["solution_1"])[,2]$cost
)
####Plotting
#Solution plot
p_solution <- plot_solution(s)
#List of species plot
sdmplotlist <- map(as.list(sdmN),plot_rast)
sdmplotlist <- sdmplotlist %>% map(add_solution_plot,s)
#Grid of table and text
# now add the title
title <- ggdraw() +
draw_label(
"Objective (min_set_objective): minimize the cost of the solution whilst ensuring that all targets are met.
Targets: (1) 20% representation of species, (2) 20% avoided loss",
fontface = 'bold',
x = 0,
hjust = 0,
size = 20
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
plot(title)
p_table <- ggtexttable(results)+
theme(plot.margin = unit(c(1, -1, 1,-1), "cm"))
p_all <- c(sdmplotlist,
list(add_solution_plot(plot_risk,s)),
list(add_solution_plot(plot_cost,s)),
list(p_solution))
g1 <- plot_grid(plotlist = p_all, ncol=3)
grid <- plot_grid(
title, g1, p_table, nrow = 3, rel_heights = c(0.1, 1, 0.2)
)
ggsave(str_c("./results/","solution",N,"_species.png"),
grid,
units="in",
width = 15, height = 20,
dpi = 300,
bg="white")
#Randomly select parcels just with the cost constraints
#Use the solution df
#Randomize the selection of parcels and calculate the relative and cost function
#Function to create random parcel selection
random_performance <- function(x) {
set.seed(x)
pa <- s %>% filter(pa == T)
#Remove PA
solution <- s %>%
filter(pa == FALSE) %>%
mutate(solution_1 = 0)
solution$solution_1[sample(nrow(solution),nparcels)] <- 1
#Join PA
solution <- rbind(solution,pa)
results <- eval_target_coverage_summary(p,solution["solution_1"]) %>%
mutate(
randomid = x,
total_cost = sum(getValues(cost)),
solution_cost = eval_cost_summary(p,solution["solution_1"])[,2]$cost)
results
}
df <- 1:100 %>% map_dfr(random_performance)
#Plots
title2 <- ggdraw() +
draw_label(
str_c("Randomly selected ",nparcels, " parcels, same number as the prioritized solution"),
fontface = 'bold',
x = 0,
hjust = 0,
size = 30
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
plot(title2)
dist <- df %>%
ggplot()+
geom_point(aes(randomid,relative_held,col = factor(randomid)),size=4)+
geom_hline(yintercept = 0.20, col="black",size=1)+
labs(x = "100 random combination of parcel selection",
y = "Relative proportion of features held",
title = "Each x-axis has 6 features 5 SDMs and 1 risk\n
represented vertically with same color")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
dist
#Cost of the solution
histcost <- df %>%
ggplot()+
geom_histogram(aes(solution_cost), col = "white")+
geom_vline(xintercept = min(results$solution_cost),
linetype = "dashed",
size = 2,
col = "red")+
labs(x = "Distribution of the cost of randomly selected parcels",
title = "Distribution of cost, the vertical dashed red line represents
the cost of the solution using prioritizr")+
theme_minimal(base_size = 20)+
theme(legend.position = "none")
histcost
grid_random <- plot_grid(
title2, dist, histcost, nrow = 3, rel_heights = c(0.1,1,0.7)
)
ggsave(str_c("./results/","random",N,"_species.png"),
grid_random,
units="in",
width = 15, height = 20,
dpi = 300,
bg="white")
N <- 5
sdmN <- sdm[[1:N]]
#calculate habitat richness
richness <- mean(sdmN)
plot(richness)
grid_random
setwd("E:/01_NSW phase 2/statelevelanalysis")
##July 2022 using mlr3 modelling approach##
##Remove all data from the environment
rm(list = ls(all.names = TRUE))
#Project defaults: Albers Equal Projection
project.crs <- 'EPSG:3577'
project.res <- 100
#Load required libraries
packages <- c("sf","terra","data.table","tidyverse",
"mlr3","mlr3learners","mlr3viz","mlr3tuning",
"iml","future","furrr","purrr","xgboost",
"lattice","tictoc","scico","ggtext","mlr3spatiotempcv")
#Load the packages
lapply(packages, require, character.only=TRUE)
######### User modelling parameters #################
#specify the number of cores to use:
cores <- availableCores()-4
###
nfolds <- 5 #CV folds
nreps <- 20 #Number of times to repeat CV
nmod <- 50 #Hyper parameter search limit
#proportion_sample <- 0.2
##################################3 DON"T MODIFY ANYTHING BELOW THIS CODE ##########################
#Create a list of study area and bind them for loop
#Specify the data path based on the system
data.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ "./data/",
Sys.info()["sysname"] == "Darwin" ~ "/Users/ascelin/tmp/NSW_cfac/data/",
Sys.info()["sysname"] == "Linux" ~ "/dev/shm/data/" #Amazon EC2
#Sys.info()["sysname"] == "Linux" ~ "/home/ubuntu/data/" #Nectar
)
#Warning message if it can't find the directory
if (dir.exists(data.path)){
print("Directory exists - process will run")
} else {
string.to.print <- paste("ERROR: can't find the directory: check data path", data.path)
stop(string.to.print)
}
nsw <- st_read(str_c(data.path,"studyarea/state/NSW_STATE_POLYGON_shp_ex_islands_proj.shp"))
combined_bio <- st_read(str_c(data.path,"studyarea/Cfact_analysis_regions/Cfact_analysis_regions_prj.shp"))
bioregion <- st_read(str_c(data.path,"studyarea/ibra/IBRA_NSW_clipped.shp"))
studyarea <- rbind(nsw %>% transmute(name = "state"),
combined_bio %>% transmute(name = combined_bio$Cfact_Regi),
bioregion %>% transmute(name = bioregion$REG_NAME_7))
print(studyarea$name)
###### SECTION 1: DATA PREPARATION ##############
yearmodelled <- "post2017"
yearlosskd <- "pre2017"
agent <- "NSW North Coast"
region <- "NSW North Coast"
region <- "agri"
results.path <- case_when(
Sys.info()["sysname"] == "Windows" ~ str_c("./results/",region,"/"),
Sys.info()["sysname"] == "Darwin" ~ str_c("/Users/ascelin/tmp/NSW_cfac/results/",region,"/"),
Sys.info()["sysname"] == "Linux" ~ str_c("/dev/shm/output/",region,"/") #Amazon
#Sys.info()["sysname"] == "Linux" ~ str_c("/home/ubuntu/results/",region,"/") #Nectar
)
if (!dir.exists(results.path)){dir.create(results.path)}
print(str_c("Preparing data to run ", agent, " in ", region, " bioregion"))
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = str_c("majorityrule_",yearmodelled,".tif$"))
cov.path <- dir(str_c(data.path, "covariates", sep=""), full.names = T, pattern = ".tif$")
#Remove minimum lot size from the state level as there is no data in western states
cov.path <- str_subset(cov.path, pattern = "minimumlotsize", negate = T)
cov.path <- str_subset(cov.path, pattern = "landuse", negate = T)
#Set up a directory for KD of previous losses
kd.path <- dir(str_c(data.path, "covariates/losskd", sep=""), full.names = T, pattern = ".tif$")
#pattern <- "landsat"
#Use both combine and separately for landsat and SPOT
pattern <- c("landsat",yearlosskd)
kd.path <- map(pattern, str_subset, string=kd.path) %>% unlist()
#Add to cov.path
cov.path <- c(cov.path,kd.path)
#Load BCT and WOODY DATA
bct <- st_read(dir(str_c(data.path,"/bct/"), full.names = T, pattern = "*.shp$"))
woody.private.land <- rast(dir(str_c(data.path, "woodyonprivateland", sep=""), full.names = T, pattern = ".tif$"))
#Create a function to run analysis across the parameters
roi <- studyarea %>% filter(name == region)
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
loss.file <- unlist(loss.file)
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.raster <- map(loss.file, rast)
#Merge the files in the raster
ifelse(
length(loss.raster) > 1,
loss.raster <- do.call(merge, loss.raster),
loss.raster <- rast(loss.raster))
plot(loss.raster)
loss.file
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
loss.file <- unlist(loss.file)
loss.file
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = str_c("majorityrule_",yearmodelled,".tif$"))
loss.path
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
loss.file
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = str_c("majorityrule_",yearmodelled,".tif$"))
loss.path
str_subset(loss.path, "agri")
list(str_subset(loss.path, "agri"))
list(str_subset(loss.path, "agri"))
a <- list(str_subset(loss.path, "agri"))
a
agent
agent <- "agri"
region
region <- "NSW North Coast"
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
#Create a function to run analysis across the parameters
roi <- studyarea %>% filter(name == region)
loss.file <- unlist(loss.file)
loss.file <- unique(loss.file) #Remove duplicate filenames
loss.raster <- map(loss.file, rast)
loss.raster
plot(loss.raster)
loss.path <- dir(str_c(data.path, "loss"), full.names=T, pattern = str_c("majorityrule_",yearmodelled,".tif$"))
## 1.1 Get loss raster
loss.file <- case_when(
agent == "agri" ~ list(str_subset(loss.path,"agri")),
agent == "fores" ~ list(str_subset(loss.path, "fores")),
agent == "infra" ~ list(str_subset(loss.path,"infra")),
agent == "af" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"))),
agent == "afi" ~ list(c(str_subset(loss.path,"agri"),
str_subset(loss.path,"fores"),
str_subset(loss.path,"infra"))))
loss.file <- unlist(loss.file)
loss.file
loss.file
loss.raster <- map(loss.file, rast)
plot(loss.raster)
#Merge the files in the raster
ifelse(
length(loss.raster) > 1,
loss.raster <- do.call(merge, loss.raster),
loss.raster <- rast(loss.raster))
#Crop to the ROI only if it is not a state model
ifelse(
region == "state",
loss.raster,
loss.raster <- loss.raster %>% crop(roi) %>% mask(vect(roi))
)
plot(loss.raster)
