tic()
toc()
log.txt <- unlist(tic.log(format = T))
tic()
toc()
log.txt <- unlist(tic.log(format = T))
tic.clearlog()
tic()
toc()
log.txt <- unlist(tic.log(format = T))
tic()
toc()
log.txt <- unlist(tic.log(format = T))
time_df <- data.frame(
cores = cores,
time = log.txt
)
time_df
tic()
toc()
log.txt <- unlist(tic.log(format = T))
time_df <- data.frame(
cores = cores,
time = log.txt
)
tic.clearlog()
View(time_df)
log.txt
tic()
toc()
log.txt <- unlist(tic.log(format = T))
log.txt
tic()
toc(log = TRUE, quiet = TRUE)
log.txt <- unlist(tic.log(format = T))
time_df <- data.frame(
cores = cores,
time = log.txt
)
View(time_df)
tic.clearlog()
getwd()
write_csv(time_df, str_c("ncores_",cores,".csv"))
packages <- c("tidyverse","sf","terra",
"prioritizr","raster","cowplot",
"scico","exactextractr","purrr",
"rlang","ggnewscale","patchwork","mmtable2","ggpubr")
lapply(packages, library, character.only=TRUE)
scico::scico_palette_show()
# create raster
r <- raster(ncol=100, nrow=100, xmn=0, xmx=10, ymn=0, ymx=10)
values(r) <- 1
c <- raster(ncol=10, nrow=10, xmn=0, xmx=10, ymn=0, ymx=10)
values(c) <- 1
# Note this requires the Random Fields package to be installed)
#Cost
set.seed(2022)
cost <- simulate_cost(c)
cost <- round(cost)
names(cost) <- "cost"
plot(cost)
#Use the costs as the base data
set.seed(2023)
parcels <- rasterToPolygons(cost) %>%
st_as_sf() %>%
mutate(nocost = 1) %>%
mutate(id = row_number()) %>%
mutate(pa = sample(c(FALSE,TRUE),100,replace = TRUE, prob=c(.7, .03)))
pa <- parcels[parcels$pa==TRUE,]
plot(parcels)
#sdm
set.seed(2022)
sdm <- simulate_species(r, n = 10, model = RandomFields::RMexp())
sdm <- as.list(sdm) %>%
set_names(str_c("sps",1:10))
sdm <- stack(sdm)
plot(sdm)
#Random veg class values #Create 5 vegetation classes
veg_values <- seq(1,5,1)
veg_values <- sample(veg_values, size = ncell(r), replace = T)
vegetation <- setValues(r,veg_values)
names(vegetation) <- "veg"
plot(vegetation)
#Create a raster-stack of vegetation types
vect <- 1:5
classify <- function(x) {
img <- vegetation
img <- clamp(img, lower=x, upper=x, useValues = F)
}
vegstack <- vect %>%
map(classify) %>%
set_names(str_c("veg",vect)) %>%
stack()
plot(vegstack)
#Create a woody vegetation data
woody <- r
woody <- sampleRandom(woody, ncell(r)*.9, asRaster=TRUE)
names(woody) <- "woody"
plot(woody)
##RISK DATA##
set.seed(2030)
risk <- simulate_species(woody, n = 1, model = RandomFields::RMexp())
risk <- mask(risk,pa, inverse=T)
names(risk) <- "risk"
plot(risk)
N <- 5
sdmList <- sdm[[1:N]]
plot(sdmList)
snames <- names(sdmList)
sdmList <- sdmList %>%
as.list() %>%
set_names(snames)
#Create a thres-holding function
threshold <- c(0.4, 0.6, 0.8)
crossing <- crossing(snames,threshold)
do_threshold <- function(threshold, sps){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$threshold, crossing$snames, do_threshold) %>%
set_names(str_c(crossing$snames,"_",threshold))
View(sdmThres)
#Convert to avoidLoss
avoidLoss <- sdmThres %>% map(~ .x * risk)
avoidLoss <- stack(avoidLoss)
plot(avoidLoss)
avoidLoss <- stack(avoidLoss)
plot(avoidLoss)
t <- data.frame(
feature = names(avoidedLoss),
type = "relative",
target = 0.2)
#Multiply by the risk
avoidedLoss <- stack(sdmThres * risk)
#Multiply by the risk
avoidedLoss <- stack(sdmThres * risk)
#Convert to avoidLoss
avoidLoss <- sdmThres %>% map(~ .x * risk)
avoidLoss <- stack(avoidLoss)
plot(avoidLoss)
t <- data.frame(
feature = names(avoidLoss),
type = "relative",
target = 0.2)
p <-
problem(parcels, features = avoidLoss, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
s <- solve(p)
plot(s)
View(sdmThres)
View(sdmThres)
#Store the objects in a listed tibble
sdmThresTable <- tibble(
sps = names(sdmThres)
)
View(sdmThresTable)
#Store the objects in a listed tibble
sdmThresTable <- tibble(
sps = names(sdmThres),
thres = names(sdmThres),
sdms = sdmThres
)
View(sdmThresTable)
plot(sdmThresTable$sdms[1,])
sdmThresTable[1,]
View(sdmThresTable)
View(sdmThres)
crossing
crossing <- crossing(snames,threshold) %>% arrange(threshold)
View(crossing)
#Convert to avoidLoss
avoidLoss <- sdmThres %>% map(~ .x * risk)
View(avoidLoss)
do_threshold <- function(threshold, sps){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$threshold, crossing$snames, do_threshold) %>%
set_names(str_c(crossing$snames,"_",threshold))
#Convert to avoidLoss
avoidLoss <- sdmThres %>% map(~ .x * risk)
View(avoidLoss)
threshold <- c(0.4, 0.6, 0.8)
crossing <- crossing(snames,threshold) %>% arrange(threshold)
do_threshold <- function(threshold, sps){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$threshold, crossing$snames, do_threshold) %>%
set_names(str_c(crossing$snames,"_",threshold))
#Convert to avoidLoss
avoidLoss <- sdmThres %>% map(~ .x * risk)
View(avoidLoss)
crossing$threshold
View(crossing)
crossing$snames
View(crossing)
View(avoidLoss)
crossing
#Create a thres-holding function
threshold <- c(0.4, 0.6, 0.8)
crossing <- crossing(snames,threshold) %>% arrange(threshold)
do_threshold <- function(threshold, species){
image <- sdmList[[species]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
sdmThres <- map2(crossing$threshold, crossing$snames, do_threshold)
View(sdmThres)
plot(sdmThres)
sdmThres %>% map(plot)
test <- stack(sdmThres)
plot(test)
crossing
#Run the function
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold) %>%
set_names(str_c(crossing$snames,"_",crossing$threshold))
#Create a thres-holding function
threshold <- c(0.4, 0.6, 0.8)
crossing <- crossing(snames,threshold) %>% arrange(threshold)
do_threshold <- function(threshold, species){
image <- sdmList[[species]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold) %>%
set_names(str_c(crossing$snames,"_",crossing$threshold))
crossing$snames
crossing$threshold
#Create a thres-holding function
threshold <- c(0.4, 0.6, 0.8)
crossing <- crossing(snames,threshold) %>% arrange(threshold)
do_threshold <- function(threshold, sps){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold) %>%
set_names(str_c(crossing$snames,"_",crossing$threshold))
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold)
crossing
#Create a thres-holding function
threshold <- c(0.4, 0.6, 0.8)
crossing <- crossing(snames,threshold)
do_threshold <- function(threshold, sps){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$threshold, crossing$snames, do_threshold) %>%
set_names(str_c(crossing$snames,"_",threshold))
crossing <- crossing(snames,threshold) %>% arrange(threshold)
do_threshold <- function(sps,threshold){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold) %>%
set_names(str_c(crossing$snames,"_",threshold))
do_threshold <- function(sps,threshold){
image <- sdmList[[sps]] %>%
reclassify(matrix(c(0,threshold, NA, threshold, 1, 1), ncol=3, byrow=T))
}
#Run the function
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold) %>%
set_names(str_c(crossing$snames,"_",threshold))
View(sdmThres)
crossing$snames
crossing$threshold
#Run the function
sdmThres <- map2(crossing$snames, crossing$threshold, do_threshold) %>%
set_names(str_c(crossing$snames,"_",crossing$threshold))
View(sdmThres)
#Convert to avoidLoss
avoidLoss <- sdmThres %>% map(~ .x * risk)
#Convert to avoidLoss
avoided_habitat_loss_list <- sdmThres %>% map(~ .x * risk)
View(avoided_habitat_loss_list)
View(avoided_habitat_loss_list)
features = avoided_habitat_loss_list["sps1_0.4"]
plot(stack(features))
names(avoided_habitat_loss_list)
threshold <- 0.4
names(avoided_habitat_loss_list)
?str_contains
library(stringi)
packages <- c("tidyverse","sf","terra","stringi"
"prioritizr","raster","cowplot",
"scico","exactextractr","purrr",
"rlang","ggnewscale","patchwork","mmtable2","ggpubr")
lapply(packages, library, character.only=TRUE)
packages <- c("tidyverse","sf","terra","stringi",
"prioritizr","raster","cowplot",
"scico","exactextractr","purrr",
"rlang","ggnewscale","patchwork","mmtable2","ggpubr")
?str_contains
###Create a function to calculate solution for each threshold
filter <- str_detect(names(avoided_habitat_loss_list),"_0.4")
filter
###Create a function to calculate solution for each threshold
filter <- str_subset(names(avoided_habitat_loss_list),"_0.4")
filter
threshold <- 0.4
filter <- str_subset(names(avoided_habitat_loss_list),threshold)
threshold <- "0.4"
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
filter
features = avoided_habitat_loss_list[filter]
a <- stack(features)
plot(a)
names(features)
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
View(t)
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = avoidLoss, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t)
#Run the solution
s <- solve(p)
View(s)
View(s)
threshold <- c("0.4","0.6","0.8")
do_planning <- function(threshold) {
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = avoidLoss, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
#add_extra_portfolio()
#Run the solution
s <- solve(p)
}
solution_list <- threshold %>% map(do_planning)
do_planning <- function(threshold) {
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
#add_extra_portfolio()
#Run the solution
s <- solve(p)
}
solution_list <- threshold %>% map(do_planning)
threshold <- "0.4"
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions()
parcels
features
do_planning <- function(threshold) {
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
features <- stack(features)
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
#add_extra_portfolio()
#Run the solution
s <- solve(p)
}
solution_list <- threshold %>% map(do_planning)
View(solution_list)
threshold <- c("0.4","0.6","0.8")
do_planning <- function(threshold) {
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
features <- stack(features)
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
#add_extra_portfolio()
#Run the solution
s <- solve(p)
}
solution_list <- threshold %>% map(do_planning)
View(solution_list)
View(s)
results <- data.frame(
target <- eval_target_coverage_summary(p,s["solution_1"])
)
View(results)
View(s)
threshold <- "0.4"
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
features <- stack(features)
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
#Run the solution
s <- solve(p)
results <- data.frame(
target <- eval_target_coverage_summary(p,s["solution_1"])
)
View(results)
eval_target_coverage_summary(p,s["solution_1"])
View(s)
s <- s %>% filter(solution_1==1)
View(s)
results <- data.frame(
id = s$id)
View(results)
View(s)
View(results)
threshold <- c("0.4","0.6","0.8")
do_planning <- function(threshold) {
#Prepare the data
filter <- str_subset(names(avoided_habitat_loss_list), threshold)
features <-  avoided_habitat_loss_list[filter]
features <- stack(features)
#Define target
t <- data.frame(
feature = names(features),
type = "relative",
target = 0.2)
#Define the problem
p <- problem(parcels, features = features, cost_column = "cost") %>%
add_min_set_objective() %>%
add_binary_decisions() %>%
add_locked_in_constraints(pa) %>%
add_manual_targets(t) #%>%
#add_extra_portfolio()
#Run the solution
s <- solve(p)
}
solution_list <- threshold %>% map(do_planning)
View(solution_list)
View(solution_list)
View(solution_list)
View(solution_list)
a <- solution_list[[1]]
View(a)
a <- plot(solution_list[[1]])
a <- plot(solution_list[[1]])
a
View(solution_list)
